--[[
    LUASHIELD alpha
]]--

--// Source
function obfuscate(source,VarName,WaterMark)
        warn("Started obfuscate")
        local Variable = VarName or "Goofy_"
        local WM

        if source == nil then
            source = [[print("Hello World!")]]
        end

        local ticks = tick()

        if typeof(WaterMark) == "string" and WaterMark ~= nil then
            WM = "    "..tostring(WaterMark).." | Secured with LuaShield by oq#6809"
        else
            WM = "    ".."WaterMark".." | Secured with LuaShield by oq#6809"
        end

        WM = "--[[".."\n".. tostring(WM) .."\n".."]]--".."\n\n"

        local random_ = function(length)
            local letters = {"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"}
            local code

            if math.random(1,2) == 1 then
                code = ""..letters[math.random(1,26)]
            else
                code = ""..tostring(letters[math.random(1,26)]):upper()
            end

            for i = 1, tonumber(length) do
                if math.random(1,2) == 1 then -- letters
                    local get_letters = letters[math.random(1,26)]
                    if math.random(1,2) == 1 then
                        code = code..tostring(get_letters):upper()
                    else
                        code = code..tostring(get_letters)
                    end
                else -- number
                    code = code..tostring(math.random(0,9))
                end
            end
            return tostring(code)
        end

        local StringToBinary = function(String)
            local BinaryString = {}

            for i, Character in ipairs(String:split'') do
                local Binary = ""
                local Byte = Character:byte()
                while Byte > 0 do
                    Binary = tostring(Byte % 2) .. Binary
                    Byte = math.modf(Byte / 2)
                end
                table.insert(BinaryString, string.format("%.8d", Binary))
            end

            return table.concat(BinaryString, " ")
        end

        local add_binary = function(number, s)
            local highest = 1

            local topic = {
                "6513456134674316745367543675134687",
                "87616785678143678543167851346781543678",
                "1657457845626542564652654262414571457457",
                "145714542465246524624581658145682567",
                "2568252644622465454571581548415682568256825672",
                "3567582457425824561361346256714514564585962267",
                "1458145856825693679763963936798267257",
                "789617891679782747457572599986178",
                "778378631978597397894381567891759378",
                "6781678617896178925624562456245642578997616",
                "4789274687862786247257425774262647",
                "78789885245624564526425628905471434545645",
                "78689417415715486856965285061653695869068909806",
                "80690680896689089606890689080960",
                "60698096809086908892646245624589066809",
                "606089689060896089608906896089",
                "3568536838568386386358368365",
                "9925629562965265929562659",
                "006066006064145661454654571457145604064",
                "624652542456452264526452645625",
                "15115431534514362456245642642624611616",
                "1531543514314324562456245514351453",
                "16541171465452456524624561613466",
                "452654717481456745781458145674642751716",
                "247524175145645245624642567415715645",
                "1845741645742548185147541574187",
                "24754158415681564856418457417",
                "814845845868568285285286528",
                "82856286586256858686385656835683",
                "3396736799673967336973693967396739639639",
                "7936736793679367967396379367936",
                "36979367960367114757457367936",
                "39673679367259625936793679",
                "93679363703678035522568568",
                "7963796393697369726255667766",
                "63793976793697693763976973936396936963",
                "2568256825865695925696379",
                "25675825685282657852682568",
                "78256825682568526982568526982575268",
                "568526852685268526852682568692568526892567658256",
                "825625682568285686528625868652858625826582",
                "286525682586526882568625685268528256",
                "267026528526867935763575638538536",
                "2568259295747561472482568952692569",
                "8355868356568356835386856865385368356826956956",
                "89189088913859041893450895341ß954139084389007138468340967",
                "4711475471574574517678678978697896145789456178091567084967481590",
                "187636478513467856813674895687143587496173845134956134071643507856735034751345",
                "1363174887789564367856978153678514751346754789547698534967854369765786785413",
                "1153453453143541714889137485913475708913458901349805",
                "14578176546145741574571455768769345671346579813497851345",
                "7145715785768534673146753157981358793453485985978358980537486075896",
                "139748567813945783149653175198375678315103457801356738965913513485",
                "5436549813578314709857089314589037165890134896093784896983176",
                "897541985345134095901903859876906690196050968346710398490834678134768",
                "81374613479086781346789134786091340789607891346913087946879013980746718930760981346",
                "1367981376598013790587139805713498057918346789347698137468907394878930167136081376",
                "01367136781346897137894678938679867968187431778645341738658163485736148765487659734615871348571348795689734685387657813678535617856387193687568753496785349687345687351469871345698769387698794586745136987134564135678154861543777547174871788758457674562427717864576784566",
                "1839168753416785346781953467891367895346789567831457931659634513798451
                "816780678613478134765768934657813467856718934579841w561345134985
                "17834571349085713948573489759830475983175981347598314759081345",
                "189375813758971359871385907139845731984598137459831485138907618937658376314ß76",
                "6965094367980347698301476908306317687737174776779787730747871563157861345",
                "978659678134567895431679853419768543967835961786854731679835891346875",
                "134513984571908347580931457089341768974689347061830638904674136",
                "167356347915867385413675481678354837151789365987656198734517834685976134875346",
                "78913780963147890136478913649870467896897348934176890371098463540986714596738746891356",
                "6139086747174986017348761389706314651389501347598345645650939763419606891346",
                "568856285658652862568282592596748539780594317031948759834589013458903149580431890501349851",
                "39617936147936147369147369147396714369147369147315721791978529527981464682468246842645",
                "75189347589137591375981349851348905709813758934758971345",
                "92568256676789249867294856790428576928457698457698425769804526980245069845986",
                "8365835881378153781537809153789053879087903154879015346856312477892589295682",
                "3568536886301785437809145378913457851347890513478905783490780939078351409199372445274752586839",
                "35683356887789134578953417980514390845143465153445615643464513564514536453454513546535683568536853997368",
                random_(math.random(50,150)),
            }

            for i,v in pairs(topic) do
                if i > highest then
                    highest = i
                end
            end

            for i = 1, tonumber(number) do
                local str = [[local ]]..Variable..tostring(random_(math.random(10,12)))..[[ = ]]..'"'..StringToBinary(tostring(topic[math.random(1, tonumber(highest))]))..'"'.."; "
                s = s..str
            end

                return tostring(s)
            end

        local Random_Variable = {
            TableByte = random_(math.random(15,20)),
            Table_concat = random_(math.random(15,20)),
            Loadstring = random_(math.random(15,20)),
        }

        local troll_func = [[function() ]]..add_binary(math.random(30,50), "")..[[ end]]
        local troll_var = [[local ]]..Variable..tostring(random_(math.random(15,20)))..[[ = ]]..troll_func

        local SourceByte = ""
        for i = 1,string.len(source) do SourceByte = SourceByte..'"\\'..string.byte(source, i)..'", ' end
        local TableByte = [[local ]]..Variable..tostring(Random_Variable.TableByte)..[[ = {]]..SourceByte..[[}]]
        local Loadstring = [[local ]]..Variable..tostring(Random_Variable.Loadstring)..[[ = loadstring(table.concat({"\114", "\101", "\116", "\117", "\114", "\110", "\32", "\102", "\117", "\110", "\99", "\116", "\105", "\111", "\110", "\40", "\98", "\121", "\116", "\101", "\41", "\10", "\32", "\32", "\32", "\32", "\105", "\102", "\32", "\116", "\121", "\112", "\101", "\111", "\102", "\40", "\98", "\121", "\116", "\101", "\41", "\32", "\61", "\61", "\32", "\34", "\116", "\97", "\98", "\108", "\101", "\34", "\32", "\116", "\104", "\101", "\110", "\10", "\32", "\32", "\32", "\32", "\32", "\32", "\32", "\32", "\108", "\111", "\97", "\100", "\115", "\116", "\114", "\105", "\110", "\103", "\40", "\116", "\97", "\98", "\108", "\101", "\46", "\99", "\111", "\110", "\99", "\97", "\116", "\40", "\98", "\121", "\116", "\101", "\41", "\41", "\40", "\41", "\10", "\32", "\32", "\32", "\32", "\101", "\108", "\115", "\101", "\10", "\32", "\32", "\32", "\32", "\32", "\32", "\32", "\32", "\98", "\121", "\116", "\101", "\32", "\61", "\32", "\123", "\98", "\121", "\116", "\101", "\125", "\10", "\32", "\32", "\32", "\32", "\32", "\32", "\32", "\32", "\108", "\111", "\97", "\100", "\115", "\116", "\114", "\105", "\110", "\103", "\40", "\116", "\97", "\98", "\108", "\101", "\46", "\99", "\111", "\110", "\99", "\97", "\116", "\40", "\98", "\121", "\116", "\101", "\41", "\41", "\40", "\41", "\10", "\32", "\32", "\32", "\32", "\101", "\110", "\100", "\10", "\101", "\110", "\100", "\10",}))()]]
        local func = {
            [1] = Variable..tostring(Random_Variable.Loadstring),
            [2] = Variable..tostring(Random_Variable.TableByte),
        }

        local fake_code = function(number,r)
            local t = {}
                for i = 1, tonumber(number) do
                    local create_Var = Variable..tostring(random_(math.random(15,20)))
                    local random

                    if r ~= nil then
                        random = "return "..tostring(random_(tonumber(r)))
                    else
                        random = "return "..tostring(random_(math.clamp(1000, string.len(source) / 2, string.len(source))))
                    end

                    local byte = ""
                    for x = 1,string.len(random) do byte = byte..'"\\'..string.byte(random, x)..'", ' end
                    local fake = [[local ]]..create_Var..[[ = {]]..byte..[[}; ]]..[[local ]]..create_Var.." = "..func[1]..[[(]]..create_Var..[[); ]]
                    table.insert(t,fake)
                end

                return unpack(t)
            end

        local obfuscated = WM..troll_var.."; "..Loadstring.."; "..fake_code(math.random(2,4), math.random(400,600))..TableByte.."; "..[[local ]]..Variable..tostring(random_(math.random(15,20))).." = "..func[1].."("..func[2]..")".."; "..fake_code(math.random(2,4), math.random(string.len(source) / 2, string.len(source) * 2))
        setclipboard(obfuscated)
        warn("Done obfuscate in "..tostring(tick() - ticks).." second")
    return
end

--// Module
return function(source,CustomVarName,WaterMark)
    task.spawn(function()
        obfuscate(source,CustomVarName,WaterMark)
    end)
end
