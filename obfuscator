--[[
    LUASHIELD alpha
]]--

--// Source
function obfuscate(source,VarName,WaterMark)
        warn("Started obfuscate")
        local Variable = VarName or "Goofy_"
        local WM

        if source == nil then
            source = [[print("Hello World!")]]
        end

        local ticks = tick()

        if typeof(WaterMark) == "string" and WaterMark ~= nil then
            WM = "    "..tostring(WaterMark).." | Secured with LuaShield by oq#6809"
        else
            WM = "    ".."WaterMark".." | Secured with LuaShield by oq#6809"
        end

        WM = "--[[".."\n".. tostring(WM) .."\n".."]]--".."\n\n"

        local random_ = function(length)
            local letters = {"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"}
            local code

            if math.random(1,2) == 1 then
                code = ""..letters[math.random(1,26)]
            else
                code = ""..tostring(letters[math.random(1,26)]):upper()
            end

            for i = 1, tonumber(length) do
                if math.random(1,2) == 1 then -- letters
                    local get_letters = letters[math.random(1,26)]
                    if math.random(1,2) == 1 then
                        code = code..tostring(get_letters):upper()
                    else
                        code = code..tostring(get_letters)
                    end
                else -- number
                    code = code..tostring(math.random(0,9))
                end
            end
            return tostring(code)
        end

        local StringToBinary = function(String)
            local BinaryString = {}

            for i, Character in ipairs(String:split'') do
                local Binary = ""
                local Byte = Character:byte()
                while Byte > 0 do
                    Binary = tostring(Byte % 2) .. Binary
                    Byte = math.modf(Byte / 2)
                end
                table.insert(BinaryString, string.format("%.8d", Binary))
            end

            return table.concat(BinaryString, " ")
        end

        local add_binary = function(number, s)
            local highest = 1

            local topic = {
                "Deo⁧⁧b⁧⁧fus⁧⁧cate?",
                "stOP REA⁧⁧DING ⁧⁧MY CODE!",
                "Put a ⁧⁧fat di⁧⁧ck in me s⁧⁧tep br⁧⁧o!!",
                "You know⁧⁧⁧⁧⁧⁧ mat⁧⁧h? sqrt(-2) * sqrt(-32) = ??",
                "Ca68B6F5Af4574305Bfa0c02E⁧⁧D2913BE",
                "0629931F6⁧⁧2623AE⁧⁧061b745897C21D662",
                "eCf8A4DE⁧⁧0d5B4Bc1b12F0275316662f7",
                "CFBbA9f⁧⁧bE84e7E7E77713998⁧⁧2c223d3d",
                "4bb369D9B1C3d1d⁧⁧A88b8d57e3DA06456",
                "0b5aadbAc0⁧⁧86Fd57E1e5CDb5D6D9e09a",
                "0D4AE2⁧⁧2e6319D230c0C5bff6a49121Df",
                "653306EC80C⁧⁧b1F1934CD2C52d14EA11A",
                "2BA7D50⁧⁧C058E8b⁧⁧FF92CF5b623A57b0Bc",
                "916572F⁧⁧75F0DB2⁧⁧38621e1aBaf096fF54",
                "6AA198⁧⁧2F791ff⁧⁧056862bDFB45380bBb4",
                "3bc6021671C1⁧⁧2Cfd22bAb4dF396d4d7b",
                "BeC892⁧⁧43C8e7fC365Bc7e4CdF2E4B38e",
                "4402bE6B0BF076D6⁧⁧246724E9Bfd1d4aC",
                "47Bfc16DdE3D2Ade176b15F3b6161647",
                "714020e891184⁧⁧293c2D0244302E60e6B",
                "0D8C55534⁧⁧947Fd5E8⁧⁧8D95C65Dc7d59cA",
                "1096c9fBBA630b47A496A8077Bc91eA8",
                "92171849c4e⁧⁧f7c2a1E⁧⁧A50B18d4A215F4",
                "DDa41a833f842CFD48b⁧⁧fFED1D7B9f833",
                "9C9eD048⁧⁧92C71781902AbB7fa9c891B0",
                "2F5d4177EFB7e586e⁧⁧⁧⁧A773f89a33BbDe0",
                "957B0f1f11e6a10A6c83e80548a6f956",
                "Da1DBE18F⁧⁧e74⁧⁧e5B2c1bA8e24092222ea",
                "11dB0cbcDc5234F4dcD18692c152BFfB",
                "545bEb3D⁧⁧⁧⁧3a9C8⁧⁧15Ac60⁧⁧7edDc3a488611",
                "f0c60D50eef9⁧⁧6bEf1aA33fdB4cE9B636",
                "061deFd0de075⁧⁧88be3d29d5fD3bE340f",
                "72dFf3bea1EA1D2350E1593⁧⁧b6c0086a6",
                "8e8400a08F0d4E4aB4DBb7ACF⁧⁧CF15a8c",
                "B31a5F32CE1963B⁧⁧3741F⁧⁧57f9837c6490",
                "4F18A215E79a91⁧⁧99fF41938eD483df7c",
                "B9338EdE4869f⁧⁧1⁧⁧50e880514C53b04e3c",
                "f51307856B74⁧⁧f6Fa46Bc1⁧⁧41⁧⁧91EC99A0e",
                "e257ed31049DE1e⁧⁧cC4⁧⁧1AB64Ad3989208",
                "6d5df0⁧⁧⁧⁧6D6621414⁧⁧⁧⁧D664dd80aB252c009",
                "88B8e257B1cE110⁧⁧⁧⁧615E0Ed168838B377",
                "8f4e5E911747e0F1d⁧⁧Ff873⁧⁧c8e71cE694",
                "20d122C6⁧⁧0B50E5⁧⁧922d15E26dB960590E",
                "2cFdF2E499B7D4B720d81E842F82⁧⁧Dd53",
                "f6B48EeA56F⁧⁧73077AbC146e23C34C13",
                "73BA50930a14⁧⁧E9b217b4eD⁧⁧3E53995F78",
                "07afAE62e10⁧⁧ff55ad5⁧⁧Ba37294916ADDe",
                "F5Eb4C7B⁧⁧⁧⁧⁧⁧38834⁧⁧7f6A9040052d568e3df",
                "1227d66fB⁧⁧014Eb⁧⁧7f35C6F1902F48Fe9",
                "a1F63F⁧⁧d0413614f2⁧⁧396dd7b85999A652",
                "63446AC473d80e3c9053c82814c3b⁧⁧844",
                "cDd3d7A⁧⁧df88eB⁧⁧6044e⁧⁧9a183524a8A1Db",
                "9e5F763a62b⁧⁧4b48⁧⁧BA2BEA151f16182e4",
                "CfE25482a1C8⁧⁧dCaf457DB85F296d8f63",
                "8dDa9ad5B7⁧⁧8bdeca7b⁧⁧1Ae5449c5A8434",
                "0A61cf84aBE032⁧⁧4⁧⁧682CEE6608C261a48",
                "D20C1358fcb1C298CD9E⁧⁧449BD20A038a",
                "2F17B02A1e3⁧⁧b1ca⁧⁧e147eE205817af120",
                "Aa541BA1F1B32794Df0Da⁧⁧3CA5aA9Cd50",
                "31032076aCCD3f4⁧⁧9454f4⁧⁧6947cA98e22",
                "4B7F6⁧⁧⁧⁧a9A2AAD16C⁧⁧73c39F0B6ed9c6248",
                "f182D55690⁧⁧⁧⁧265⁧⁧⁧⁧163CF1F42544C3B4D23",
                "765EbB2B25b64Cb716⁧⁧717D8a6Df88b04",
                "d293781e06c⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧b5⁧⁧fc099962952a2975901",
                "8.108749199048694⁧⁧e+25",
                "6^654356786⁧⁧⁧⁧⁧⁧8764589632",
                "184658165482561268⁧⁧215",
                "76578193⁧⁧⁧⁧6459863450^650^47",
                "^4658649538974698⁧⁧5^38697",
                "^034976^384⁧⁧960^347680^37468",
                "56fg68h5(⁧⁧%G⁧⁧N(7fg7&",
                "5gj8a79f5dgj⁧⁧8a⁧⁧⁧⁧⁧⁧79dfg589a7f",
                "1345789134⁧⁧⁧⁧⁧⁧⁧⁧75980134758h13453j487",
                "dsf7g6⁧⁧⁧⁧⁧⁧sd8fg6⁧⁧⁧⁧7g87⁧⁧9d675689872404",
                "hj64j756⁧⁧⁧⁧⁧⁧⁧⁧874j581⁧⁧4561456g4148934tm834",
                "734689^0⁧⁧346n5⁧⁧769345776876n53n345",
                "9595v87hh3⁧⁧47598⁧⁧7gh9j1409jfuhwhvmgvskskgv",
                "g5314g5gh4hj⁧⁧⁧⁧⁧⁧6v46hfb541ghj6f1jk46gfn1j61hj6f1556k16",
                "gadnfhkaf⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧og5ti^4566^3485876345",
                "nigger1267865⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧678367858329⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧8763418581793489576137846571378465613450986137468134096317557134556713404736150674100345390467⁧⁧013453046815613460691346751734797861348951735017345091384758976134890516345134561346571376574371895⁧⁧713645713785613667136795671347903463478674761483764751267872694072867472167767675665719384",
                "00000000000000⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧0000000000000000000000000000⁧⁧00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
                "111111116⁧⁧⁧⁧⁧⁧⁧⁧66666666666666666⁧⁧6666644444444444444449999999999999999999999999999999999922222222222222222222222200000000000000000000000000005555555555555555555555555555544444444444444444444999999999933333333333333333333366666666666666666666666666666666666666666666666⁧⁧666664222222222222222222222222222277777777777777777777777777777777777755555555555",
                "⁧⁧",
                "⁧⁧⁧⁧⁧⁧",
                "⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧",
                "   ​   ​     ⁧⁧   ​ ",
                "   ​   ​      ⁧⁧  ​ ",
                "   ​  ⁧⁧⁧⁧⁧⁧ ​        ​ ",
                "   ​   ⁧⁧​        ​ ",
                "   ​   ​      ⁧⁧⁧⁧⁧⁧  ​ ",
                "   ​ ⁧⁧⁧⁧  ​⁧⁧ ​​​​​​​​​​​​​​​​​​​​​       ​ ",
                "   ​   ​     ⁧⁧   ​ ",
                "fuck y⁧⁧ou nigg⁧⁧er boy!",
                "there⁧⁧ is a mon⁧⁧key in ⁧⁧my bathroom!",
                "LuaShi⁧⁧eld > You",
                "where ⁧⁧⁧⁧⁧⁧is you⁧⁧r water at nigger?",
                "bro ur ⁧⁧black",
                "oq#6809 was here l⁧⁧ol",
                "   ​ ​​​​​​​​​⁧⁧sssss​​​​​  ​   ​​​​​​​​​​​​​​​​​​​​     ​ ",
                "   ​   ​  ​​​​​​​​​​​​​​​​​​​⁧⁧​​​      ​ ",
                "   ​   ​    ⁧⁧    ​ ",
                "LuaShi⁧⁧eld by oq#680⁧⁧9 is so cool",
                "Lua⁧⁧Shie⁧⁧ld by oq#6⁧⁧809 is so cool",
                "LuaSh⁧⁧ield by oq#⁧⁧6809 is so cool",
                "   ​   ​        ⁧⁧​ ",
                "LuaShi⁧⁧eld by oq#6⁧⁧809 is so⁧⁧ cool",
                "LuaShie⁧⁧ld by oq#6⁧⁧809 is so cool",
                "   ​   ​   ⁧⁧     ​ ",
                "do you⁧⁧ snack dry bo⁧⁧nes?",
                "do you⁧⁧⁧⁧ have a ⁧⁧mom AND dad",
                "get⁧⁧⁧⁧ back in⁧⁧to your⁧⁧ cage monkey",
                "   ​   ​   ⁧⁧     ​ ",
                "lol nice ski⁧⁧⁧⁧ll iss⁧⁧ues nigger",
                "yo nigg⁧⁧⁧⁧⁧⁧y is your blood ⁧⁧black too?",
                "get back i⁧⁧nto your⁧⁧ cage monkey",
                "LuaShiel⁧⁧⁧⁧⁧⁧d by oq#6809 i⁧⁧s sooo cool omg",
                "   ​   ​     ⁧⁧   ​ ",
                "caught u lack⁧⁧in lol!",
                "REMEMBER TR⁧⁧OLLS DONT GET⁧⁧ BLOCKED FROM LUASHIELD",
                "fuck you en⁧⁧⁧⁧crypted services!!!!",
                "   ​ ​​​​​​​⁧⁧​​​​​​​​​​​​​​​​​​​ ​        ​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​ ",
                "   ​   ​                   ​​​​​​⁧⁧                                         ​ ",
                "   ​​​​​​​​​⁧⁧​​​​  ​​​​​​​​​​​​  ​ ",
                "   ​   ​     ⁧⁧   ​ ",
                " ​​​​​​⁧⁧⁧⁧​​​​​⁧⁧​​​​​​​​​​ ​   ​        ​ ",
                "   ​⁧⁧​​​​​​​⁧⁧​​​​​​​​​   ​    ​​​​​​​​​​​​​​​​​​    ​ ",
                "   ​   ⁧⁧​        ​ ",
                "   ​⁧⁧   ​   ⁧⁧     ​ ",
                "​​​​⁧⁧​​​​​​​​​​​​​​​​  ​   ​        ​ ",
                " ​​​​⁧⁧​​​​⁧⁧⁧⁧​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​  ​   ​   ​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​     ​ ",
                "   ​⁧⁧   ​        ​ ",
                "   ​⁧⁧   ​        ​ ",
                "   ​⁧⁧   ​        ​ ",
                "   ⁧⁧​   ​  ⁧⁧      ​ ",
                "   ​   ​      ⁧⁧  ​ ",
                "   ⁧⁧​ ​​​​​​​​​​​​​​  ​        ​ ",
                "   ​   ​     ⁧⁧   ​ ",
                "  ⁧⁧ ​   ​ ⁧⁧       ​ ",
                "   ​⁧⁧   ​        ​ ",
                "   ​   ​  ⁧⁧​​​​​​​​​​​​​​​​​​​​      ​ ",
                "   ​  ⁧⁧ ​        ​ ",
                "   ​   ​  ⁧⁧   ​​​​​​​​​​​​​​​​​​​​​​​​ ",
                "   ​   ​⁧⁧⁧⁧  ⁧⁧      ​ ",
                "   ​   ​  ⁧⁧      ​ ",
                "   ​​​​​​​⁧⁧​​​​​​​​​​​​​​​​⁧⁧​​​​​​   ​        ​ ",
                "   ​​​​​​​​⁧⁧​​​​​⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧​​​​​​​​​​​​​​​​​​​​   ​        ​ ",
                "   ​   ​ ⁧⁧​​​​​​​​​​​​​​​​       ​ ",
                "   ​   ​     ​​​​⁧⁧​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​   ​ ",
                "should s⁧⁧⁧⁧op wast⁧⁧ing your time⁧⁧ on trying to crack this >:)",
                "shoul⁧⁧⁧⁧⁧⁧⁧⁧d stop wast⁧⁧⁧⁧ing your time ⁧⁧on trying to crack this >:)",
                "sho⁧⁧uld st⁧⁧⁧⁧⁧⁧⁧⁧op wasting your t⁧⁧ime on trying to crack this >:)",
                "   ​​​​​​​​​​​​​​   ​​​​​​​​⁧⁧​​​​​        ​​​​⁧⁧​​​​​​​​​​​ ",
                "should stop w⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧⁧asting you⁧⁧r time on trying to crack this >:)",
                random_(math.random(50,150)),
            }

            for i,v in pairs(topic) do
                if i > highest then
                    highest = i
                end
            end

            for i = 1, tonumber(number) do
                local str = [[local ]]..Variable..tostring(random_(math.random(10,12)))..[[ = ]]..'"'..StringToBinary(tostring(topic[math.random(1, tonumber(highest))]))..'"'.."; "
                s = s..str
            end

                return tostring(s)
            end

        local Random_Variable = {
            TableByte = random_(math.random(15,20)),
            Table_concat = random_(math.random(15,20)),
            Loadstring = random_(math.random(15,20)),
        }

        local troll_func = [[function() ]]..add_binary(math.random(30,50), "")..[[ end]]
        local troll_var = [[local ]]..Variable..tostring(random_(math.random(15,20)))..[[ = ]]..troll_func

        local SourceByte = ""
        for i = 1,string.len(source) do SourceByte = SourceByte..'"\\'..string.byte(source, i)..'", ' end
        local TableByte = [[local ]]..Variable..tostring(Random_Variable.TableByte)..[[ = {]]..SourceByte..[[}]]
        local Loadstring = [[local ]]..Variable..tostring(Random_Variable.Loadstring)..[[ = loadstring(table.concat({"\114", "\101", "\116", "\117", "\114", "\110", "\32", "\102", "\117", "\110", "\99", "\116", "\105", "\111", "\110", "\40", "\98", "\121", "\116", "\101", "\41", "\10", "\32", "\32", "\32", "\32", "\105", "\102", "\32", "\116", "\121", "\112", "\101", "\111", "\102", "\40", "\98", "\121", "\116", "\101", "\41", "\32", "\61", "\61", "\32", "\34", "\116", "\97", "\98", "\108", "\101", "\34", "\32", "\116", "\104", "\101", "\110", "\10", "\32", "\32", "\32", "\32", "\32", "\32", "\32", "\32", "\108", "\111", "\97", "\100", "\115", "\116", "\114", "\105", "\110", "\103", "\40", "\116", "\97", "\98", "\108", "\101", "\46", "\99", "\111", "\110", "\99", "\97", "\116", "\40", "\98", "\121", "\116", "\101", "\41", "\41", "\40", "\41", "\10", "\32", "\32", "\32", "\32", "\101", "\108", "\115", "\101", "\10", "\32", "\32", "\32", "\32", "\32", "\32", "\32", "\32", "\98", "\121", "\116", "\101", "\32", "\61", "\32", "\123", "\98", "\121", "\116", "\101", "\125", "\10", "\32", "\32", "\32", "\32", "\32", "\32", "\32", "\32", "\108", "\111", "\97", "\100", "\115", "\116", "\114", "\105", "\110", "\103", "\40", "\116", "\97", "\98", "\108", "\101", "\46", "\99", "\111", "\110", "\99", "\97", "\116", "\40", "\98", "\121", "\116", "\101", "\41", "\41", "\40", "\41", "\10", "\32", "\32", "\32", "\32", "\101", "\110", "\100", "\10", "\101", "\110", "\100", "\10",}))()]]
        local func = {
            [1] = Variable..tostring(Random_Variable.Loadstring),
            [2] = Variable..tostring(Random_Variable.TableByte),
        }

        local fake_code = function(number,r)
            local t = {}
                for i = 1, tonumber(number) do
                    local create_Var = Variable..tostring(random_(math.random(15,20)))
                    local random

                    if r ~= nil then
                        random = "return "..tostring(random_(tonumber(r)))
                    else
                        random = "return "..tostring(random_(math.clamp(1000, string.len(source) / 2, string.len(source))))
                    end

                    local byte = ""
                    for x = 1,string.len(random) do byte = byte..'"\\'..string.byte(random, x)..'", ' end
                    local fake = [[local ]]..create_Var..[[ = {]]..byte..[[}; ]]..[[local ]]..create_Var.." = "..func[1]..[[(]]..create_Var..[[); ]]
                    table.insert(t,fake)
                end

                return unpack(t)
            end

        local obfuscated = WM..troll_var.."; "..Loadstring.."; "..fake_code(math.random(2,4), math.random(400,600))..TableByte.."; "..[[local ]]..Variable..tostring(random_(math.random(15,20))).." = "..func[1].."("..func[2]..")".."; "..fake_code(math.random(2,4), math.random(string.len(source) / 2, string.len(source) * 2))
        setclipboard(obfuscated)
        warn("Done obfuscate in "..tostring(tick() - ticks).." second")
    return
end

--// Module
return function(source,CustomVarName,WaterMark)
    task.spawn(function()
        obfuscate(source,CustomVarName,WaterMark)
    end)
end
